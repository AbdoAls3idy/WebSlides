!function(e){function t(i){if(n[i])return n[i].exports;var s=n[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/static/js/",t(t.s=17)}([function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(14),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(){i(this,e)}return r(e,null,[{key:"createNode",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=document.createElement(e);return i.id=t,n&&(i.textContent=n),i}},{key:"hide",value:function(e){e.style.display="none"}},{key:"show",value:function(e){e.style.display=""}},{key:"fireEvent",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new s.a(t,{detail:n});e.dispatchEvent(i)}},{key:"toArray",value:function(e){return[].slice.call(e)}}]),e}();t.a=o},function(e,t,n){"use strict";var i={ENTER:13,SPACE:32,RE_PAGE:33,AV_PAGE:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40};t.a=i},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=window.navigator.userAgent,o=function(){function e(){i(this,e)}return s(e,null,[{key:"isAndroid",value:function(){return!!r.match(/Android/i)}},{key:"isBlackBerry",value:function(){return!!r.match(/BlackBerry/i)}},{key:"isiOS",value:function(){return!!r.match(/iPhone/i)}},{key:"isOpera",value:function(){return!!r.match(/Opera Mini/i)}},{key:"isWindows",value:function(){return!!r.match(/IEMobile/i)}},{key:"isWindowsPhone",value:function(){return!!r.match(/Windows Phone/i)}},{key:"isAny",value:function(){return e.isAndroid()||e.isBlackBerry()||e.isiOS()||e.isOpera()||e.isWindows()||e.isWindowsPhone()}}]),e}();t.a=o},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(11),r=n(5),o=n(0),a=n(16),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),u={VERTICAL:"vertical"},c={clickNav:s.a.ClickNav,grid:s.a.Grid,hash:s.a.Hash,keyboard:s.a.Keyboard,nav:s.a.Navigation,scroll:s.a.Scroll,touch:s.a.Touch},d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.autoslide,s=void 0!==n&&n,r=t.changeOnClick,o=void 0!==r&&r,a=t.minWheelDelta,l=void 0===a?40:a,c=t.scrollWait,d=void 0===c?450:c,h=t.slideOffset,f=void 0===h?50:h;if(i(this,e),this.el=document.getElementById("webslides"),this.isMoving=!1,this.slides=null,this.currentSlideI_=-1,this.currentSlide_=null,this.maxSlide_=0,this.isVertical=this.el.classList.contains(u.VERTICAL),this.plugins={},this.interval_=null,this.options={autoslide:s,changeOnClick:o,minWheelDelta:l,scrollWait:d,slideOffset:f},!this.el)throw new Error("Couldn't find the webslides container!");this.removeChildren_(),this.grabSlides_(),this.createPlugins_(),this.initSlides_(),this.play(),this.onInit_()}return l(e,[{key:"removeChildren_",value:function(){for(var e=this.el.childNodes,t=e.length;t--;){var n=e[t];r.a.isCandidate(n)||this.el.removeChild(n)}}},{key:"createPlugins_",value:function(){var e=this;Object.keys(c).forEach(function(t){var n=c[t];e.plugins[t]=new n(e)})}},{key:"onInit_",value:function(){o.a.fireEvent(this.el,"ws:init")}},{key:"grabSlides_",value:function(){this.slides=o.a.toArray(this.el.childNodes).map(function(e,t){return new r.a(e,t)}),this.maxSlide_=this.slides.length}},{key:"goToSlide",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(this.isValidIndexSlide_(e)&&!this.isMoving&&this.currentSlideI_!==e){this.isMoving=!0;var n=!1;null!==t?n=t:this.currentSlideI_>=0&&(n=e>this.currentSlideI_);var i=this.slides[e];null===this.currentSlide_||!this.isVertical||this.plugins.touch&&this.plugins.touch.isEnabled?this.transitionToSlide_(n,i,this.onSlideChange_):this.scrollTransitionToSlide_(n,i,this.onSlideChange_)}}},{key:"scrollTransitionToSlide_",value:function(e,t,i){var s=this;this.el.style.overflow="none",e?t.show():(t.moveBeforeFirst(),t.show(),n.i(a.a)(this.currentSlide_.el.offsetTop,0)),n.i(a.a)(t.el.offsetTop,500,function(){s.currentSlide_.hide(),e&&s.currentSlide_.moveAfterLast(),s.el.style.overflow="auto",setTimeout(function(){i.call(s,t)},150)})}},{key:"transitionToSlide_",value:function(e,t,i){n.i(a.a)(0,0),e||t.moveBeforeFirst(),this.currentSlide_&&(e&&this.currentSlide_.moveAfterLast(),this.currentSlide_.hide()),t.show(),i.call(this,t)}},{key:"onSlideChange_",value:function(e){this.currentSlide_=e,this.currentSlideI_=e.i,this.isMoving=!1,o.a.fireEvent(this.el,"ws:slide-change",{slides:this.maxSlide_,currentSlide0:this.currentSlideI_,currentSlide:this.currentSlideI_+1})}},{key:"goNext",value:function(){var e=this.currentSlideI_+1;e>=this.maxSlide_&&(e=0),this.goToSlide(e,!0)}},{key:"goPrev",value:function(){var e=this.currentSlideI_-1;e<0&&(e=this.maxSlide_-1),this.goToSlide(e,!1)}},{key:"isValidIndexSlide_",value:function(e){return e>=0&&e<this.maxSlide_}},{key:"initSlides_",value:function(){var e=this.plugins.hash.constructor.getSlideNumber();if((null===e||e>=this.maxSlide_)&&(e=0),0!==e)for(var t=0;t<e;)this.slides[t].moveAfterLast(),t++;this.goToSlide(e)}},{key:"play",value:function(e){e=e||this.options.autoslide,!this.interval_&&"number"==typeof e&&e>0&&(this.interval_=setInterval(this.goNext.bind(this),e))}},{key:"stop",value:function(){this.interval_&&(clearInterval(this.interval_),this.interval_=null)}}],[{key:"registerPlugin",value:function(e,t){c[e]=t}}]),e}();t.a=d},function(e,t){throw new Error("Module build failed: ModuleBuildError: Module build failed: No input specified: provide a file name or a source string to process\n    at C:\\Projects\\Github\\webslides\\node_modules\\webpack\\lib\\NormalModule.js:141:35\n    at C:\\Projects\\Github\\webslides\\node_modules\\loader-runner\\lib\\LoaderRunner.js:364:11\n    at C:\\Projects\\Github\\webslides\\node_modules\\loader-runner\\lib\\LoaderRunner.js:230:18\n    at context.callback (C:\\Projects\\Github\\webslides\\node_modules\\loader-runner\\lib\\LoaderRunner.js:111:13)\n    at Object.asyncSassJobQueue.push [as callback] (C:\\Projects\\Github\\webslides\\node_modules\\sass-loader\\lib\\loader.js:51:13)\n    at C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:2237:31\n    at apply (C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:20:25)\n    at C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:56:12\n    at C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:843:16\n    at module.exports.render (C:\\Projects\\Github\\webslides\\node_modules\\node-sass\\lib\\index.js:375:5)\n    at C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:3894:5\n    at process (C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:2309:17)\n    at Immediate.<anonymous> (C:\\Projects\\Github\\webslides\\node_modules\\async\\dist\\async.js:2115:16)\n    at runCallback (timers.js:649:20)\n    at tryOnImmediate (timers.js:622:5)\n    at processImmediate [as _immediateCallback] (timers.js:594:5)")},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(0),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o={SLIDE:"slide",CURRENT:"current"},a=function(){function e(t,n){i(this,e),this.el=t,this.parent=t.parentNode,this.i=n,this.el.id="section-"+(n+1),this.el.classList.add(o.SLIDE),this.hide()}return r(e,[{key:"hide",value:function(){s.a.hide(this.el),this.el.classList.remove(o.CURRENT)}},{key:"show",value:function(){s.a.show(this.el),this.el.classList.add(o.CURRENT)}},{key:"moveAfterLast",value:function(){var e=this.parent.childNodes[this.parent.childElementCount-1];this.parent.insertBefore(this.el,e.nextSibling)}},{key:"moveBeforeFirst",value:function(){var e=this.parent.childNodes[0];this.parent.insertBefore(this.el,e)}}],[{key:"isCandidate",value:function(e){return 1===e.nodeType&&"SECTION"===e.tagName}}]),e}();t.a=a},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=["INPUT","SELECT","OPTION","BUTTON","A","TEXTAREA"],o=function(){function e(t){i(this,e),this.ws_=t,t.options.changeOnClick&&this.ws_.el.addEventListener("click",this.onClick_.bind(this))}return s(e,[{key:"onClick_",value:function(e){r.indexOf(e.target.tagName)<0&&void 0===e.target.dataset.preventNav&&this.ws_.goNext()}}]),e}();t.a=o},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(1),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t){i(this,e),this.ws_=t;var n="body.baseline {\n                  background: url(../images/baseline.png) left top .8rem/.8rem;\n                }",s=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css",r.styleSheet?r.styleSheet.cssText=n:r.appendChild(document.createTextNode(n)),s.appendChild(r),document.addEventListener("keydown",this.onKeyPress_.bind(this),!1)}return r(e,[{key:"onKeyPress_",value:function(e){e.which===s.a.ENTER&&document.body.toggleClass("baseline")}}]),e}();t.a=o},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r="#slide",o=/#slide=(\d+)/,a=function(){function e(t){i(this,e),this.ws_=t,t.el.addEventListener("ws:slide-change",e.onSlideChange_),window.addEventListener("hashchange",this.onHashChange_.bind(this),!1)}return s(e,[{key:"onHashChange_",value:function(){var t=e.getSlideNumber();null!==t&&this.ws_.goToSlide(t)}}],[{key:"onSlideChange_",value:function(t){e.setSlideNumber(t.detail.currentSlide)}},{key:"getSlideNumber",value:function(){var e=document.location.hash.match(o),t=0;return Array.isArray(e)&&(t=parseInt(e[1],10)),"number"!=typeof t||t<0||!Array.isArray(e)?t=null:t--,t}},{key:"setSlideNumber",value:function(t){e.getSlideNumber()!==t-1&&history.pushState({slideI:t-1},"Slide "+t,r+"="+t)}}]),e}();t.a=a},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(1),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t){i(this,e),this.ws_=t,document.addEventListener("keydown",this.onKeyPress_.bind(this),!1)}return r(e,[{key:"onKeyPress_",value:function(e){var t=void 0,n=void 0;if(document.activeElement){var i="inherit"!==document.activeElement.contentEditable;if(["INPUT","SELECT","OPTION","TEXTAREA"].indexOf(document.activeElement.tagName)>-1||i)return}switch(e.which){case s.a.AV_PAGE:case s.a.SPACE:t=this.ws_.goNext;break;case s.a.RE_PAGE:t=this.ws_.goPrev;break;case s.a.HOME:t=this.ws_.goToSlide,n=0;break;case s.a.END:t=this.ws_.goToSlide,n=this.ws_.maxSlide_-1;break;case s.a.DOWN:t=this.ws_.isVertical?this.ws_.goNext:null;break;case s.a.UP:t=this.ws_.isVertical?this.ws_.goPrev:null;break;case s.a.LEFT:t=this.ws_.isVertical?null:this.ws_.goPrev;break;case s.a.RIGHT:t=this.ws_.isVertical?null:this.ws_.goNext}t&&t.call(this.ws_,n)}}]),e}();t.a=o},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(0),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o={NAV:"navigation",NEXT:"next",PREV:"previous",COUNTER:"counter"},a={VERTICAL:{NEXT:"↓",PREV:"↑"},HORIZONTAL:{NEXT:"→",PREV:"←"}},l=function(){function e(t){i(this,e);var n=t.isVertical?a.VERTICAL:a.HORIZONTAL;this.el=s.a.createNode("div","navigation"),this.next=e.createArrow(o.NEXT,n.NEXT),this.prev=e.createArrow(o.PREV,n.PREV),this.counter=s.a.createNode("span",o.COUNTER),this.ws_=t,this.el.appendChild(this.next),this.el.appendChild(this.prev),this.el.appendChild(this.counter),this.ws_.el.appendChild(this.el),this.bindEvents_()}return r(e,[{key:"bindEvents_",value:function(){this.ws_.el.addEventListener("ws:slide-change",this.onSlideChanged_.bind(this)),this.next.addEventListener("click",this.onButtonClicked_.bind(this)),this.prev.addEventListener("click",this.onButtonClicked_.bind(this))}},{key:"updateCounter",value:function(e,t){this.counter.textContent=e+" / "+t}},{key:"onSlideChanged_",value:function(e){this.updateCounter(e.detail.currentSlide,e.detail.slides)}},{key:"onButtonClicked_",value:function(e){e.preventDefault(),e.target===this.next?this.ws_.goNext():this.ws_.goPrev()}}],[{key:"createArrow",value:function(e,t){var n=s.a.createNode("a",e,t);return n.href="#",n.title="Arrow Keys",n}}]),e}();t.a=l},function(e,t,n){"use strict";var i=n(6),s=n(7),r=n(8),o=n(9),a=n(10),l=n(12),u=n(13);t.a={ClickNav:i.a,Grid:s.a,Hash:r.a,Keyboard:o.a,Navigation:a.a,Scroll:l.a,Touch:u.a}},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(2),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t){i(this,e),this.ws_=t,this.scrollContainer_=t.el,this.isGoingUp_=!1,this.isGoingLeft_=!1,this.timeout_=null,s.a.isAny()||(this.scrollContainer_.addEventListener("wheel",this.onMouseWheel_.bind(this)),t.isVertical||t.el.addEventListener("ws:slide-change",this.onSlideChange_.bind(this)))}return r(e,[{key:"onSlideChange_",value:function(){var e=this;this.timeout_=setTimeout(function(){e.timeout_=null},this.ws_.options.scrollWait)}},{key:"onMouseWheel_",value:function(e){if(this.ws_.isMoving||this.timeout_)return void e.preventDefault();var t=e.deltaY,n=e.deltaX,i=this.ws_.isVertical,s=Math.abs(n)>Math.abs(t);if(this.isGoingUp_=t<0,this.isGoingLeft_=n<0,s){if(i)return;e.preventDefault()}(Math.abs(t)>=this.ws_.options.minWheelDelta||Math.abs(n)>=this.ws_.options.minWheelDelta)&&(s&&this.isGoingLeft_||!s&&this.isGoingUp_?this.ws_.goPrev():this.ws_.goNext(),e.preventDefault())}}]),e}();t.a=o},function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(2),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o={touch:{START:"touchstart",MOVE:"touchmove",END:"touchend"},pointer:{START:"pointerdown",MOVE:"pointermove",END:"pointerup"}},a=function(){function e(t){i(this,e),this.ws_=t,this.startX_=0,this.startY_=0,this.endX_=0,this.endY_=0,this.isEnabled=!1;var n=void 0;s.a.isAny()&&(n=window.PointerEvent&&(s.a.isWindows()||s.a.isWindowsPhone())?o.pointer:o.touch,this.isEnabled=!0,document.addEventListener(n.START,this.onStart_.bind(this),!1),document.addEventListener(n.MOVE,this.onMove_.bind(this),!1),document.addEventListener(n.MOVE,this.onMove_.bind(this),!1),document.addEventListener(n.END,this.onStop_.bind(this),!1))}return r(e,[{key:"onStart_",value:function(t){var n=e.normalizeEventInfo(t);this.startX_=n.x,this.startY_=n.y,this.endX_=n.x,this.endY_=n.y}},{key:"onMove_",value:function(t){var n=e.normalizeEventInfo(t);this.endX_=n.x,this.endY_=n.y}},{key:"onStop_",value:function(){var e=this.startX_-this.endX_,t=this.startY_-this.endY_;Math.abs(e)>Math.abs(t)&&(e<-this.ws_.options.slideOffset?this.ws_.goPrev():e>this.ws_.options.slideOffset&&this.ws_.goNext())}}],[{key:"normalizeEventInfo",value:function(e){var t=void 0,n=void 0,i={pageX:0,pageY:0};return void 0!==e.changedTouches?i=e.changedTouches[0]:void 0!==e.originalEvent&&void 0!==e.originalEvent.changedTouches&&(i=e.originalEvent.changedTouches[0]),t=e.offsetX||e.layerX||i.pageX,n=e.offsetY||e.layerY||i.pageY,{x:t,y:n}}}]),e}();t.a=a},function(e,t,n){"use strict";function i(){try{var e=new s("t",{detail:{a:"b"}});return"t"===e.type&&"b"===e.detail.a}catch(e){}return!1}var s=window.CustomEvent,r=function(e,t){var n=document.createEvent("CustomEvent");return t?n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail):n.initCustomEvent(e,!1,!1,void 0),n},o=i()?s:r;t.a=o},function(e,t,n){"use strict";function i(e){return.5-Math.cos(e*Math.PI)/2}function s(e){return e}t.a={swing:i,linear:s}},function(e,t,n){"use strict";function i(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},i=e-r.scrollTop,o=r.scrollTop,a=16;if(!t)return r.scrollTop=e,void n();!function l(u){u+=a;var c=Math.min(1,u/t),d=s.a.swing(c,u*c,e,i,t);r.scrollTop=Math.floor(o+d*i),u<t?setTimeout(function(){return l(u)},a):n()}(0)}var s=n(15);t.a=i;var r=document.getElementById("webslides")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(3);n(4),window.WebSlides=i.a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,